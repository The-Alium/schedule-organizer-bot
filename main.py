import os

import disnake
from disnake.ext import commands, tasks
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –£–∫–∞–∂–∏—Ç–µ ID —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
ALLOWED_ROLES = {828641723353137224, 731187000673173594}
OFFICER_ROLE_ID = 731187000673173594 # ID —Ä–æ–ª–∏ –æ—Ñ–∏—Ü–µ—Ä–∞

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
VALID_DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
load_dotenv("token.env")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("schedule.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    day TEXT UNIQUE,
    organizer_id INTEGER,
    start_time TEXT,
    gamemode TEXT
)
""")
conn.commit()

bot = commands.Bot(command_prefix=None, intents=disnake.Intents.default())
CHANNEL_ID = None  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞, –≥–¥–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
schedule_message_id = None  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º


async def update_schedule(channel):
    global schedule_message_id
    cursor.execute("SELECT day, organizer_id, start_time, gamemode FROM schedule ORDER BY id")
    events = cursor.fetchall()

    event_dict = {day: "–°–≤–æ–±–æ–¥–Ω–æ" for day in VALID_DAYS}

    for day, organizer_id, start_time, gamemode in events:
        event_dict[day] = f"**–ö—Ç–æ –∑–∞–Ω—è–ª:** <@{organizer_id}>\n**–í—Ä–µ–º—è:** {start_time}\n**–ì–µ–π–º–º–æ–¥:** {gamemode}"

    current_date = datetime.utcnow() + timedelta(hours=3)  # UTC+3
    current_week_of_month = (current_date.day - 1) // 7 + 1
    current_month = current_date.strftime("%B")

    embed = disnake.Embed(title=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {current_week_of_month}-—é –Ω–µ–¥–µ–ª—é {current_month}",
                          color=disnake.Color.dark_purple())
    embed.set_footer(text="For Alium by alexeyyt4/–§—É—Ç–∞–±–∞")

    for day in VALID_DAYS:
        embed.add_field(name=f"**{day}**", value=event_dict[day], inline=False)

    if schedule_message_id:
        try:
            message = await channel.fetch_message(schedule_message_id)
            await message.edit(embed=embed)
        except:
            sent_message = await channel.send(embed=embed)
            schedule_message_id = sent_message.id
    else:
        sent_message = await channel.send(embed=embed)
        schedule_message_id = sent_message.id


@bot.event
async def on_ready():
    print(f"Logging as {bot.user}")
    channel = bot.get_channel(CHANNEL_ID)
    await update_schedule(channel)


@bot.slash_command(description="–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
async def add_event(inter: disnake.ApplicationCommandInteraction, day: str = commands.Param(description="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"), start_time: str = commands.Param(description="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è"), gamemode: str = commands.Param(description="–ì–µ–π–º–º–æ–¥")):
    if not any(role.id in ALLOWED_ROLES for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", ephemeral=True)
        return

    if day.capitalize() not in VALID_DAYS:
        await inter.response.send_message(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.",
            ephemeral=True)
        return

    cursor.execute("REPLACE INTO schedule (day, organizer_id, start_time, gamemode) VALUES (?, ?, ?, ?)",
                   (day.capitalize(), inter.author.id, start_time, gamemode))
    conn.commit()

    await inter.response.send_message(f"–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {day.capitalize()} –≤ {start_time}. –ì–µ–π–º–º–æ–¥: {gamemode}")
    channel = bot.get_channel(CHANNEL_ID)
    await update_schedule(channel)


@bot.slash_command(description="–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è")
async def cancel_event(inter: disnake.ApplicationCommandInteraction, day: str = commands.Param(description="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏")):
    if not any(role.id in ALLOWED_ROLES for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", ephemeral=True)
        return

    if day.capitalize() not in VALID_DAYS:
        await inter.response.send_message(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.",
            ephemeral=True)
        return

    cursor.execute("SELECT organizer_id FROM schedule WHERE day = ?", (day.capitalize(),))
    row = cursor.fetchone()
    if row:
        organizer_id = row[0]
        if organizer_id != inter.author.id and not any(role.id == OFFICER_ROLE_ID for role in inter.author.roles):
            await inter.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –¥—Ä—É–≥–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º.",
                                              ephemeral=True)
            return

        cursor.execute("DELETE FROM schedule WHERE day = ?", (day.capitalize(),))
        conn.commit()
        await inter.response.send_message(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {day.capitalize()} –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        channel = bot.get_channel(CHANNEL_ID)
        await update_schedule(channel)
    else:
        await inter.response.send_message("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.", ephemeral=True)


@tasks.loop(hours=1)
async def clear_schedule():
    now = datetime.utcnow() + timedelta(hours=3)  # UTC+3
    if now.weekday() == 0 and now.hour == 0:
        cursor.execute("DELETE FROM schedule")
        conn.commit()
        channel = bot.get_channel(CHANNEL_ID)
        await update_schedule(channel)


@clear_schedule.before_loop
async def before_clearing():
    await bot.wait_until_ready()


clear_schedule.start()

bot.run(os.getenv("BOT_TOKEN"))