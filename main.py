import disnake
from disnake.ext import commands, tasks
import sqlite3
from datetime import datetime, timedelta

# –£–∫–∞–∂–∏—Ç–µ ID —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
ALLOWED_ROLES = {1169723413443661984}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
VALID_DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("schedule.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    day TEXT UNIQUE,
    organizer TEXT,
    start_time TEXT,
    gamemode TEXT
)
""")
conn.commit()

bot = commands.Bot(intents=disnake.Intents.default())


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@bot.slash_command(description="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def add_event(inter: disnake.ApplicationCommandInteraction, day: str, start_time: str, gamemode: str):
    if not any(role.id in ALLOWED_ROLES for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", ephemeral=True)
        return

    if day.capitalize() not in VALID_DAYS:
        await inter.response.send_message(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.",
            ephemeral=True)
        return

    cursor.execute("SELECT * FROM schedule WHERE day = ?", (day.capitalize(),))
    existing_event = cursor.fetchone()

    if existing_event:
        await inter.response.send_message(f"–î–µ–Ω—å {day.capitalize()} —É–∂–µ –∑–∞–Ω—è—Ç.", ephemeral=True)
        return

    cursor.execute("INSERT INTO schedule (day, organizer, start_time, gamemode) VALUES (?, ?, ?, ?)",
                   (day.capitalize(), inter.author.display_name, start_time, gamemode))
    conn.commit()
    await inter.response.send_message(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {day.capitalize()} –≤ {start_time}. –ì–µ–π–º–º–æ–¥: {gamemode}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Embed-—Ñ–æ—Ä–º–∞—Ç–µ
@bot.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def show_schedule(inter: disnake.ApplicationCommandInteraction):
    if not any(role.id in ALLOWED_ROLES for role in inter.author.roles):
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", ephemeral=True)
        return

    cursor.execute("SELECT day, organizer, start_time, gamemode FROM schedule ORDER BY id")
    events = cursor.fetchall()

    event_dict = {day: "–°–≤–æ–±–æ–¥–Ω–æ" for day in VALID_DAYS}  # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–Ω–∏ –∫–∞–∫ "–°–≤–æ–±–æ–¥–Ω–æ"

    for day, organizer, start_time, gamemode in events:
        event_dict[day] = f"**–ö—Ç–æ –∑–∞–Ω—è–ª:** {organizer}\n**–í—Ä–µ–º—è:** {start_time}\n**–ì–µ–π–º–º–æ–¥:** {gamemode}"

    # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è –∏ –º–µ—Å—è—Ü
    current_date = datetime.utcnow() + timedelta(hours=3)  # UTC+3
    current_week_of_month = (current_date.day - 1) // 7 + 1  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –º–µ—Å—è—Ü–∞
    current_month = (datetime.utcnow() + timedelta(hours=3)).strftime("%B")  # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

    embed = disnake.Embed(title=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {current_week_of_month}-—é –Ω–µ–¥–µ–ª—é {current_month}",
                          color=disnake.Color.dark_purple())
    embed.set_footer(text="For Alium by Futaba")

    for day in VALID_DAYS:
        embed.add_field(name=f"**{day}**", value=event_dict[day], inline=False)

    await inter.response.send_message(embed=embed)


# –û—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ –ø–æ–ª–Ω–æ—á—å
@tasks.loop(hours=1)
async def clear_schedule():
    now = datetime.utcnow() + timedelta(hours=3)  # UTC+3
    if now.weekday() == 0 and now.hour == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 00:00
        cursor.execute("DELETE FROM schedule")
        conn.commit()


@clear_schedule.before_loop
async def before_clearing():
    await bot.wait_until_ready()


clear_schedule.start()


bot.run("")
